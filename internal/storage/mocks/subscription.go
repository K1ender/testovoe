// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go
//
// Generated by this command:
//
//	mockgen -source=subscription.go -destination=mocks/subscription.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	models "testovoe/internal/models"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionStorage is a mock of SubscriptionStorage interface.
type MockSubscriptionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStorageMockRecorder
	isgomock struct{}
}

// MockSubscriptionStorageMockRecorder is the mock recorder for MockSubscriptionStorage.
type MockSubscriptionStorageMockRecorder struct {
	mock *MockSubscriptionStorage
}

// NewMockSubscriptionStorage creates a new mock instance.
func NewMockSubscriptionStorage(ctrl *gomock.Controller) *MockSubscriptionStorage {
	mock := &MockSubscriptionStorage{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStorage) EXPECT() *MockSubscriptionStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionStorage) Create(ctx context.Context, sub *models.Subscription) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sub)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionStorageMockRecorder) Create(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionStorage)(nil).Create), ctx, sub)
}

// Delete mocks base method.
func (m *MockSubscriptionStorage) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionStorageMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscriptionStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSubscriptionStorage) Get(ctx context.Context, id int) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubscriptionStorageMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubscriptionStorage)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockSubscriptionStorage) List(ctx context.Context, userID, serviceName string, limit, offset int) ([]models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, serviceName, limit, offset)
	ret0, _ := ret[0].([]models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubscriptionStorageMockRecorder) List(ctx, userID, serviceName, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubscriptionStorage)(nil).List), ctx, userID, serviceName, limit, offset)
}

// TotalForPeriod mocks base method.
func (m *MockSubscriptionStorage) TotalForPeriod(ctx context.Context, periodStart, periodEnd time.Time, userID, serviceName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalForPeriod", ctx, periodStart, periodEnd, userID, serviceName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalForPeriod indicates an expected call of TotalForPeriod.
func (mr *MockSubscriptionStorageMockRecorder) TotalForPeriod(ctx, periodStart, periodEnd, userID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalForPeriod", reflect.TypeOf((*MockSubscriptionStorage)(nil).TotalForPeriod), ctx, periodStart, periodEnd, userID, serviceName)
}

// Update mocks base method.
func (m *MockSubscriptionStorage) Update(ctx context.Context, id int, sub *models.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionStorageMockRecorder) Update(ctx, id, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionStorage)(nil).Update), ctx, id, sub)
}
